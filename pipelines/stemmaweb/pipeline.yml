---
resources:
    - name: ci
      type: git
      source:
        uri: {{ci-uri}}
        paths: [ pipelines/stemmaweb/resources/ ]

    - name: ssh-keys
      type: git
      source:
        uri: {{ssh-keys-uri}}
        private_key: {{DHUniWienMU-priv-key}}

    - name: config
      type: git
      source:
        uri: {{config-uri}}
        private_key: {{DHUniWienMU-priv-key}}

    - name: sources
      type: git
      source:
        uri: {{sources-uri}}
        branch: {{sources-branch}}

    - name: final-base-image
      type: docker-image
      source:
        repository: {{final-base-image}}
        insecure_registries: [ {{insecure-registries}} ]

    - name: final-image
      type: docker-image
      source:
        repository: {{final-image}}
        insecure_registries: [ {{insecure-registries}} ]

    - name: configured-test-image
      type: docker-image
      source:
        repository: {{configured-test-image}}
        insecure_registries: [ {{insecure-registries}} ]

    - name: configured-image
      type: docker-image
      source:
        repository: {{configured-image}}
        insecure_registries: [ {{insecure-registries}} ]

    - name: final-base-image-version
      type: semver
      source:
        driver: git
        uri: {{version-uri}}
        branch: master
        file: {{final-base-image-version-file}}
        initial_version: "0.0.0"
        private_key: {{DHUniWienMU-priv-key}}

    - name: final-image-version
      type: semver
      source:
        driver: git
        uri: {{version-uri}}
        branch: master
        file: {{final-image-version-file}}
        initial_version: "0.0.0"
        private_key: {{DHUniWienMU-priv-key}}

    - name: configured-test-image-version
      type: semver
      source:
        driver: git
        uri: {{version-uri}}
        branch: master
        file: {{configured-test-image-version-file}}
        initial_version: "0.0.0"
        private_key: {{DHUniWienMU-priv-key}}

    - name: configured-image-version
      type: semver
      source:
        driver: git
        uri: {{version-uri}}
        branch: master
        file: {{configured-image-version-file}}
        initial_version: "0.0.0"
        private_key: {{DHUniWienMU-priv-key}}

jobs:
  - name: build-final-base-image

    plan:
      - aggregate:
        - get: ci
          trigger: true
        # need sources to run `cpanm --installdeps`
        - get: sources

      - put: final-base-image-version
        params:
          bump: patch

      - put: final-base-image
        params:
          build: ./
          dockerfile: ci/pipelines/stemmaweb/resources/Dockerfile-final-base
          tag: final-base-image-version/version
          tag_as_latest: True

  - name: build-final-image

    plan:
      - aggregate:
        - get: final-base-image
          trigger: true
          passed: [build-final-base-image]
          # dockerfile ci/pipelines/stemmaweb/resources/Dockerfile-final is
          # not supposed to change;  Makefile.PL and the actual sources are
        - get: ci
        - get: sources
          trigger: true
        - get: config
          trigger: true

      - put: final-image-version
        params:
          bump: patch

      - put: final-image
        params:
          build: ./
          dockerfile: ci/pipelines/stemmaweb/resources/Dockerfile-final
          tag: final-image-version/version
          tag_as_latest: True

  - name: test-final-image

    plan:
      - get: final-image
        passed: [build-final-image]
        trigger: true

      - task: task-test-final-image

        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{final-image}}
              insecure_registries: [ {{insecure-registries}} ]

          run:
            path: sh
            # dir is relative to build directory,
            # something like :/tmp/build/e6c369ea/
            # dir: /var/www/stemmaweb
            args:
              - -exc
              - |
                cd /var/www/stemmaweb
                prove -Ilib

  - name: build-configured-test-image

    plan:
      - aggregate:
        - get: final-image
          trigger: true
          passed: [build-final-image]
        - get: ci
        - get: config
          trigger: true
          passed: [build-final-image]

      - put: configured-test-image-version
        params:
          bump: patch

      - task: task-copy

        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{final-image}}
              insecure_registries: [ {{insecure-registries}} ]

          inputs:
            - name: config
          outputs:
            - name: artifacts

          run:
            path: cp
            args:
              - config/stemmaweb-editions-moe-test.conf
              - artifacts/stemmaweb.conf

      - put: configured-test-image
        params:
          build: ./
          dockerfile: ci/pipelines/stemmaweb/resources/Dockerfile-configured
          tag: configured-test-image-version/version
          tag_as_latest: True


  - name: deploy-editions-moe-test
    plan:
      - aggregate:
        - get: configured-test-image
          passed: [build-configured-test-image]
          trigger: true
        - get: config
          passed: [build-configured-test-image]
          trigger: true
        - get: ssh-keys
        - get: ci
        - get: configured-test-image-version

      - task: task-deploy-editions-moe-test

        # especially handy when tasks are in their own files and re-used!
        input_mapping: { version: configured-test-image-version }
        # output_mapping: {}

        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{final-base-image}}
              insecure_registries: [ {{insecure-registries}} ]

          inputs:
            - name: ci
            - name: config
            - name: ssh-keys
            - name: version

          run:
            path: sh
            args:
              - "ci/bin/deploy.sh"
              - "config/deploy-editions-moe-test.conf"


  - name: build-configured-image

    plan:
      - aggregate:
        - get: final-image
          trigger: true
          passed: [build-final-image]
        - get: ci
        - get: config
          trigger: true
          passed: [build-final-image]

      - put: configured-image-version
        params:
          bump: patch

      - task: task-copy

        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{final-image}}
              insecure_registries: [ {{insecure-registries}} ]

          inputs:
            - name: config
          outputs:
            - name: artifacts

          run:
            path: cp
            args:
              - config/stemmaweb-editions-moe.conf
              - artifacts/stemmaweb.conf

      - put: configured-image
        params:
          build: ./
          dockerfile: ci/pipelines/stemmaweb/resources/Dockerfile-configured
          tag: configured-image-version/version
          tag_as_latest: True


  - name: deploy-editions-moe
    plan:
      - aggregate:
        - get: configured-image
          passed: [build-configured-image]
        - get: config
        - get: ssh-keys
        - get: ci
        - get: configured-image-version

      - task: task-deploy-editions-moe

        # especially handy when tasks are in their own files and re-used!
        input_mapping: { version: configured-image-version }
        # output_mapping: {}

        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: {{final-base-image}}
              insecure_registries: [ {{insecure-registries}} ]

          inputs:
            - name: ci
            - name: config
            - name: ssh-keys
            - name: version

          run:
            path: sh
            args:
              - "ci/bin/deploy.sh"
              - "config/deploy-editions-moe.conf"
